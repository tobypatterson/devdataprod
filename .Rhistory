modelFittedLM
corrMatrix = diag(rep(1,5))
corrMatrix
corrMatrix[2, 3] <- corrMatrix[3, 2] <- .7
corrMatrix[5, 3] <- corrMatrix[3, 5] <- -.7
corrMatrix[4, 1] <- corrMatrix[1, 4] <- -.67
corrMatrix
corrDF <- expand.grid(row = 1:5, col = 1:5)
corrDF
corrDF$correlation <- as.vector(corrMatrix)
levelplot(correlation ~ row+ col, corrDF)
findCorrelation(corrMatrix, cutoff = .65, verbose = TRUE)
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
inTrain = createDataPartition(y=iris$Species, p=.7, list=F)
inTrain = createDataPartition(y=iris$Species, p=.7, list=F)
training = iris[inTrain,]
testing  = iris[-inTrain,]
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modelFit = train(Species ~ ., method='rpart', data=training)
print(modFit$finalModel)
modelFit = train(Species ~ ., method='rpart', data=training)
install.package('e1071')
install.packages('e1071')
install.packages('randomForest')
modelFit = train(Species ~ ., method='rpart', data=training)
print(modFit$finalModel)
print(modelFit$finalModel)
data = read.csv(file="ElectricalOutputSpecific.csv")
setwd("~/Code/Misc/DataProduct")
data = read.csv(file="ElectricalOutputSpecific.csv")
View(data)
data = read.csv(file="ElectricalOutputSpecific.csv")
View(data)
str(data)
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "int"))
??read.csv
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "numeric"))
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "integer"))
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "character"))
str(dta)
str(data)
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "raw"))
setClass('myDate')
setAs("character","myDate", function(from) as.Date(from, format="%Y/%m/%d %H:%M:%S") )
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "numeric"))
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate"))
str(data)
data = read.csv(file="ElectricalOutputSpecific.csv")
str(data)
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "int"))
data = read.csv(file="ElectricalOutputSpecific.csv", colClasses = c("myDate", "integer"))
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
str(data)
data$timestamp = as.Date(data$timestamp, format="%Y/%m/%d %H:%M:%S") )
data$timestamp = as.Date(data$timestamp, format="%Y/%m/%d %H:%M:%S")
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
data$timestamp = as.Date(data$timestamp, format="%Y/%m/%d %H:%M:%S")
str(data)
data$Timestamp = as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S")
str(data)
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S")
View(data)
as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S")
as.Date(data$zimestamp, format="%Y/%m/%d %H:%M:%S")
as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S")
as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S ")
as.Date(data$Timestamp, format="%Y/%m/%d %H:%M:%S")
data$Timestamp
as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S")
data$Timestamp = as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S")
str$Timestamp
str(data)
as.xts()
install.packages('xts')
ts(data, frequency=12)
?ts
head(ts(data, frequency=12))
plot(data)
hist(data)
hist(data$Timestamp, $data$Mains)
hist(data$Timestamp, data$Mains)
data$Timestamp = as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
data$Timestamp = as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
data$Date = as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
aggregate(. ~ Date, data, mean)
aggregate(. ~ Date, data, mean, na.action = na.omit)
str(data)
aggregate(Mains ~ Date, data, mean, na.action = na.omit)
rawData = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
procData = data.frame(Date= as.Date(rawData$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC") )
data = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
data$Date = as.Date(data$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
aggregate(Mains ~ Date, data, mean, na.action = na.omit)
rawData = read.csv(file="ElectricalOutputSpecific.csv", stringsAsFactors=FALSE)
rawData$Date = as.Date(rawData$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
aggregatedData = aggregate(Mains ~ Date, rawData, mean, na.action = na.omit)
plot(aggregatedData)
plot(aggregatedData, type="line")
plot(aggregatedData)
str(aggregatedData)
lm(Date ~ Mains, aggregatedData)
plot(lm(Date ~ Mains, aggregatedData))
lm(Mains ~ Date, aggregatedData)
plot( lm(Mains ~ Date, aggregatedData) )
library(ggplot2)
library(ggplot)
install.packages('ggplot2')
library(ggplot)
library(ggplot2)
model = lm(Mains ~ Date, aggregatedData)
xplot(model)
zplot(model)
qplot(model)
str(aggregatedData)
ggplot(aggregatedData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(aggregatedData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%m-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%m-%Y") + xlab("") + ylab("Electrical Usage")
str(rawData)
ggplot(rawData, aes(Timestamp, Mains)) + geom_line() +
scale_x_date(format = "%m-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Timestamp, Mains)) + geom_line() +
scale_x_date() + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date() + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format = "%m-%Y") + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date() + xlab("") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date() + xlab(format="%Y") + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format="%Y") + xlab('') + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format="%d") + xlab('') + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date(format="%Y-%m-%d") + xlab('') + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_line() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
ggplot(rawData, aes(Date, Mains)) + geom_point() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
ggplot(aggregatedData, aes(Date, Mains)) + geom_point() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
save(aggregatedData, 'ElectricalUsage.Rda')
save(aggregatedData, file='ElectricalUsage.Rda')
load('ElectricalUsage.Rda')
load('ElectricalUsage.Rda')
load('ElectricalUsage')
load('ElectricalUsage.Rda')
runApp()
appRun()
?run
??run
library(shiny)
runApp()
runApp()
runApp()
runApp()
ggplot(aggregatedData, aes(Date, Mains)) + geom_point() + geom_smooth() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
runApp()
shiny::runApp()
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
rawData$Date = as.Date(rawData$Timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
rawData$Date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
aggregatedData = aggregate(rawData, by="Date", fun=mean, na.action = na.omit)
aggregatedData = aggregate(rawData, by="Date", FUN=mean, na.action = na.omit)
str(rawData)
rawData$date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
str(rawData)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
rawData$date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
aggregatedData = aggregate(rawData, by="date", FUN=mean, na.action = na.omit)
str(rawData)
aggregatedData = aggregate(rawData, by=$rawData$date, FUN=mean, na.action = na.omit)
aggregatedData = aggregate(rawData, by=rawData$date, FUN=mean, na.action = na.omit)
aggregatedData = aggregate(rawData, by=c(rawData$date), FUN=mean, na.action = na.omit)
rawData$date
str(rawData)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
rawData$date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC")
str(rawData)
aggregatedData = aggregate(c(usage, appcat_4, appcat_7) ~ date, rawData, mean, na.action = na.omit)
~ date, rawData, mean, na.action = na.omit)
aggregatedData = aggregate(usage ~ date, rawData, mean, na.action = na.omit)
aggregatedData = aggregate(c(usage) ~ date, rawData, mean, na.action = na.omit)
aggregatedData = aggregate(c(usage, appcat_7) ~ date, rawData, mean, na.action = na.omit)
aggregatedData = aggregate( date ~ c(usage, appcat_7), rawData, mean, na.action = na.omit)
aggregatedData = aggregate( date ~ c(usage), rawData, mean, na.action = na.omit)
View(aggregatedData)
aggregatedData = aggregate(c(usage) ~ date, rawData, mean, na.action = na.omit)
View(aggregatedData)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
processedData = data.frame(
date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
level = rawData$usage,
lighting = rawData$appcat_4,
heating = rawData$appcat_7
)
aggregatedData = aggregate(processedData, by='date', mean, na.action = na.omit)
.Primitive("c")
aggregatedData = aggregate(processedData, by=c('date', mean, na.action = na.omit)
)
aggregatedData = aggregate(processedData, by=c('date'), mean, na.action = na.omit)
aggregatedData = aggregate(processedData, by=c('date'), FUN=mean, na.action = na.omit)
aggregatedData = aggregate(processedData, by=c(date), FUN=mean, na.action = na.omit)
aggregatedData = aggregate(processedData, by=c(processedData$date), FUN=mean, na.action = na.omit)
processedData$date
class(processedData$date)
aggregatedData = aggregate(processedData, by=list(processedData$date), FUN=mean, na.action = na.omit)
aggregatedData
class(aggregatedData)
str(aggregatedData)
aggregatedData = aggregate(processedData, by=list(Group.1=processedData$date), FUN=mean, na.action = na.omit)
str(aggregatedData)
library(reshape)
library(reshape2)
md <- melt(processedData, id=(c("date")))
md
print(md)
head(md)
cast(md, date ~ level, lighting, heating)
cast(md, date ~ level, lighting, heating)
dcast(md, date ~ level, lighting, heating)
dcast(md, date ~ level, lighting, heating)
str(processedData)
md
str(md)
unique(md$variable)
dcast(md, level, lighting, heating)
dcast(md, date ~ level, lighting, heating)
dcast(md, date)
dcast(md, date ~ level)
dcast(md, level)
?dcast
dcast(md, date ~ level + lighting + heating, mean)
dcast(md, date ~ lighting + heating, mean)
dcast(md, date, mean)
dcast(md, level, mean)
dcast(md, level + lighting + heating ~ date, mean)
library(plyr)
library(dplyr)
install.packages('dplyr')
dataByDays = group_by(processedData, date)
library(dplyr)
dataByDays = group_by(processedData, date)
head(dataByDays)
test = summarize(dataByDays, usage=mean(level))
test
test = summarize(dataByDays, level=mean(level), lighting=mean(lighting))
test = summarize(dataByDays, usage=mean(level), light=mean(lighting),heat=mean(heating))
test
save(elecUsage, 'ElectricalUsage.Rda')
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
processedData = data.frame(
date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
level = rawData$usage,
lighting = rawData$appcat_4,
heating = rawData$appcat_7
)
dataByDays = group_by(processedData, date)
elecUsage  = summarize(dataByDays,
usage=mean(level),
light=mean(lighting),
heat=mean(heating)
)
test = summarize(dataByDays, usage=mean(level), light=mean(lighting),heat=mean(heating))
save(elecUsage, 'ElectricalUsage.Rda')
save(elecUsage, file='ElectricalUsage.Rda')
str(elecUsage)
ggplot(elecUsage, aes(date, heat + light)) + geom_point() + geom_smooth() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, heat + light)) + geom_point() + geom_smooth() +
scale_x_date(light) + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, heat + light)) + geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage + heat + light)) + geom_point() + geom_smooth() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage + heat + light)) + scale_colour_gradient(low = "blue") + geom_smooth() +
scale_x_date() + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage + heat + light)) +
geom_point() + scale_colour_gradient(low = "blue") + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage + heat + light)) +
geom_point() + scale_colour_gradient(low = "blue") + geom_smooth() +
xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage + heat + light)) +
geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) +
geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) + aes(date, light)
geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) + aes(date, light) +
geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) +
geom_point() + geom_smooth() +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) +
geom_point() + geom_smooth() +
geom_point(aes_string(x=date, y=light)) +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
ggplot(elecUsage, aes(date, usage)) +
geom_point() + geom_smooth() +
geom_point(data=elecUsage, aes_string(x=date, y=light)) +
scale_x_date('light') + xlab('') + ylab("Electrical Usage")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
?textInput
runApp(display.mode="showcase")
runApp(display.mode="showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textOuput
??textOutput
??textOutput
?shiny
??textOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c('RCurl', 'shinyapps'))
shiny::runApp()
shiny::runApp()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shiny::runApp()
shiny::runApp()
shiny::runApp()
)
widgets     : [bootstrap, shiny, interactive]
library(slidify)
install.packages('slidify')
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
require(devtools)
install.package('devtools')
install.packages('devtools')
install.packages("devtools")
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
library(slidify)
```{r opts.label = 'shiny'}
slidifyUI(
pageWithSidebar(
headerPanel("Energy Cost Analysis"),
sidebarPanel(
h3('Utility Rates'),
p('What is your estimated utility rate? The rate should be kilowatt hours.'),
numericInput("rate", "Electricity Rate", 100, 0),
h4('Estimated Costs'),
p('Based on this utility rate and historical data, we estimate the following costs by category.'),
span('Lighting Cost: '),
textOutput('light', inline=T),
br(),
span('Heating Cost: '),
textOutput('heat', inline=T)
),
mainPanel(
plotOutput('plot')
)
)
)
)
```
runDeck()
library(slidifyLibraries)
runDeck()
library(slidfy)
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
runDeck()
library('knitr')
browseUrl('index.Rmd')
browseUrl('index.html')
browseURL('index.html')
)
--- .slidify
---
;
## The Applicataion
```{r opts.label = 'shiny'}
body a {
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
runDeck()
runDeck()
library(plyr)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
processedData = data.frame(
date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
level = rawData$usage,
lighting = rawData$appcat_4,
heating = rawData$appcat_7
)
dataByDays = group_by(processedData, date)
dataByDays
str(dataByDays)
str(processedData)
elecUsage
str(elecUsage)
?format.Date
asDate(elecData, "%M")
as.Date(elecData, "%M")
as.Date(elecData$date, "%M")
as.Date(elecUsage$date, "%M")
as.Date(elecUsage$date, "%m")
format.Date(elecUsage$date, "%m")
library(plyr)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
processedData = data.frame(
date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
level = rawData$usage,
lighting = rawData$appcat_4,
heating = rawData$appcat_7
)
dataByDays = group_by(processedData, date)
elecUsage  = summarize(dataByDays,
usage=mean(level),
light=mean(lighting),
heat=mean(heating)
)
elecUsage$month = format.Date(elecUsage$date, "%m")
save(elecUsage, file='ElectricalUsage.Rda')
format.Date(elecUsage$date, "%m")
load('ElectricalUsage.Rda')
str(ElecUsage)
str(elecUsage)
mean(elecUsage$heat)
mean(subset(elecUsage, month == '12')$heat)
mean(subset(elecUsage, month == '06')$heat)
mean(subset(elecUsage, month == '12')$heat)
mean(subset(elecUsage, month == '12')$light)
mean(subset(elecUsage, month == '4')$light)
mean(subset(elecUsage, month == '04')$light)
library(plyr)
rawData = read.csv(file="ElectricalOutputWithCat.csv", stringsAsFactors=FALSE)
processedData = data.frame(
date = as.Date(rawData$timestamp, format="%Y-%m-%d %H:%M:%S", tz="UTC"),
level = rawData$usage/1000,
lighting = rawData$appcat_4/1000,
heating = rawData$appcat_7/1000
)
dataByDays = group_by(processedData, date)
elecUsage  = summarize(dataByDays,
usage=mean(level),
light=mean(lighting),
heat=mean(heating)
)
elecUsage$month = as.numeric(format.Date(elecUsage$date, "%m"))
save(elecUsage, file='ElectricalUsage.Rda')
load('ElectricalUsage.Rda')
str(elecUsage)
runApp()
runApp()
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp()
